.TH "elpa_eigenvectors_double" 3 "Wed Aug 9 2023" "ELPA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
elpa_eigenvectors_double \- computes all eigenvalues and (part of) the eigenvector spectrum for a real symmetric matrix
.br

.SH SYNOPSIS
.br
.SS FORTRAN INTERFACE
use elpa
.br
class(elpa_t), pointer :: elpa
.br

call elpa%\fBeigenvectors_double\fP (a, ev, q, error)
.sp
With the definitions of the input and output variables:

.TP
class(elpa_t) :: \fB elpa\fP
An instance of the ELPA object.
.TP
datatype ::\fB a\fP ! can also be a device pointer of type(c_ptr)
The host/device matrix\fB a\fP for which all eigenvalues and (part of) eigenvectors should be computed.
The dimensions of matrix\fB a\fP must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP of the matrix must be "real(kind=c_double)".
The matrix has to be symmetric, this is not checked by the routine.
In case of a GPU build\fB a\fP can be a device pointer to a matrix\fB a\fP in the device memory.
.TP
datatype ::\fB ev\fP
The host/device vector\fB ev\fP where the eigenvalues will be stored in\fI ascending\fP order.
The\fB datatype\fP of the vector\fB ev\fP must be "real(kind=c_double)".
In case of a GPU build\fB ev\fP can be a device pointer to the vectors of eigenvalues in the device memory.
.TP
datatype :: \fB q\fP
The host/device storage space for the computed eigenvectors.
The number of requested eigenvectors must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP of the matrix must be "real(kind=c_double)".
In case of a GPU build\fB q\fP can be a device pointer to the matrix\fB q\fP in the device memory.
.TP
integer, optional :: \fB error\fP
The return error code of the function. Should be "ELPA_OK". The error code can be queried with the function\fB elpa_strerr\fP(3)

.br
.SS C INTERFACE
#include <elpa/elpa.h>
.br
elpa_t handle;

.br
void\fB elpa_eigenvectors_double\fP(\fBelpa_t\fP handle,\fB datatype\fP *a,\fB datatype\fP *ev,\fB datatype\fP *q,\fB int\fP *error);
.sp
With the definitions of the input and output variables:

.TP
elpa_t \fB handle\fP;
The handle to the ELPA object
.TP
datatype \fB *a\fP;
The host/device matrix\fB a\fP for which the eigenpairs should be computed.
The dimensions of the matrix must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP must be "double".
The matrix has to be symmetric, this is not checked by the routine.
In case of a GPU build\fB a\fP can be a device pointer to a matrix\fB a\fP in the device memory.
.TP
datatype \fB *ev\fP;
The host/device storage for the computed eigenvalues.
Eigenvalues will be stored in\fI ascending\fP order.
The\fB datatype\fP must be "double".
In case of a GPU build\fB ev\fP can be a device pointer to the vectors of eigenvalues in the device memory.
.TP
datatype \fB *q\fP;
The host/device storage space for the computed eigenvectors.
The number of requested eigenvectors must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP must be one of "double".
In case of a GPU build\fB q\fP can be a device pointer to a matrix\fB q\fP in the device memory.
.TP
int \fB *error\fP;
The error code of the function. Should be "ELPA_OK". The error codes can be queried with\fB elpa_strerr\fP(3)

.SH DESCRIPTION
Computes the eigenvalues and (part of) the eigenvector spectrum of a real symmetric double precision matrix. The functions\fB elpa_init\fP(3),\fB elpa_allocate\fP(3),\fB elpa_set\fP(3), and\fB elpa_setup\fP(3) must be called\fI BEFORE\fP\fB elpa_eigenvectors_double\fP can be called. In particular, the number of eigenvectors to be computed, "nev", must be set with\fB elpa_set\fP(3).

.SH SEE ALSO
\fBelpa2_print_kernels\fP(1)\fB elpa_init\fP(3)\fB elpa_allocate\fP(3)\fB elpa_set\fP(3)\fB elpa_setup\fP(3)\fB elpa_strerr\fP(3)\fB elpa_eigenvalues\fP(3)\fB elpa_skew_eigenvalues\fP(3)\fB elpa_skew_eigenvectors\fP(3)\fB elpa_cholesky\fP(3)\fB elpa_invert_triangular\fP(3)\fB elpa_solve_tridiagonal\fP(3)\fB elpa_hermitian_multiply\fP(3)\fB elpa_uninit\fP(3)\fB elpa_deallocate\fP(3)
