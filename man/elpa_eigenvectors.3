.TH "elpa_eigenvectors" 3 "Wed Aug 9 2023" "ELPA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
elpa_eigenvectors \- computes the eigenvalues and (part of) the eigenvector spectrum for a real symmetric or complex hermitian matrix.
.sp
There are also variations of this routine that can accept not only host but also device pointers as input/output. 
Names of these routines explicitly contain the corresponding datatypes:
elpa_eigenvectors_double,
elpa_eigenvectors_float,
elpa_eigenvectors_double_complex,
elpa_eigenvectors_float_complex.

.SH SYNOPSIS
.br
.SS FORTRAN INTERFACE
use elpa
.br
class(elpa_t), pointer :: elpa
.br

call elpa%\fBeigenvectors\fP (a, ev, q, error)
.sp
With the definitions of the input and output variables:

.TP
class(elpa_t) :: \fB elpa\fP
An instance of the ELPA object.
.TP
datatype ::\fB a\fP
The matrix\fB a\fP for which the eigenvalues should be computed.
The dimensions of matrix\fB a\fP must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP of the matrix can be one of "real(kind=c_double)", "real(kind=c_float)", "complex(kind=c_double)", or "complex(kind=c_float)".
The matrix has to be symmetric or hermitian, this is not checked by the routine.
.TP
datatype ::\fB ev\fP
The vector of eigenvalues \fB ev\fP stored in\fI ascending\fP order.
The\fB datatype\fP of the vector\fB ev\fP can be either "real(kind=c_double)" or "real(kind=c_float)", depending of the\fB datatype\fP of the matrix.
Note that complex hermitian matrices also have real-valued eigenvalues.
.TP
datatype :: \fB q\fP
The storage space for the computed eigenvectors.
The number of requested eigenvectors must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP of the matrix can be one of "real(kind=c_double)", "real(kind=c_float)", "complex(kind=c_double)", or "complex(kind=c_float)".
.TP
integer, optional :: \fB error\fP
The return error code of the function. Should be "ELPA_OK". The error code can be queried with the function\fB elpa_strerr\fP(3).

.br
.SS C INTERFACE
#include <elpa/elpa.h>
.br
elpa_t handle;

.br
void\fB elpa_eigenvalues\fP(\fBelpa_t\fP handle,\fB datatype\fP *a,\fB datatype\fP *ev,\fB datatype\fP *q,\fB int\fP *error);
.sp
With the definitions of the input and output variables:

.TP
elpa_t \fB handle\fP;
The handle to the ELPA object
.TP
datatype \fB *a\fP;
The matrix\fB a\fP for which the eigenvalues should be computed.
The dimensions of the matrix must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP can be one of "double", "float", "double complex", or "float complex".
The matrix has to be symmetric or hermitian, this is not checked by the routine.
.TP
datatype \fB *ev\fP;
The storage for the computed eigenvalues.
Eigenvalues will be stored in\fI ascending\fP order.
The\fB datatype\fP can be either "double" or "float".
Note that the eigenvalues of complex hermitian matrices are also real.
.TP
datatype \fB *q\fP;
The storage space for the computed eigenvectors.
The number of requested eigenvectors must be set\fI BEFORE\fP with the methods\fB elpa_set\fP(3) and\fB elpa_setup\fP(3).
The\fB datatype\fP can be one of "double", "float", "double complex", or "float complex".
.TP
int \fB *error\fP;
The error code of the function. Should be "ELPA_OK". The error codes can be queried with\fB elpa_strerr\fP(3)

.SH DESCRIPTION
Computes the eigenvalues and (part of) the eigenvector spectrum of a real symmetric or complex hermitian matrix. The functions\fB elpa_init\fP(3),\fB elpa_allocate\fP(3),\fB elpa_set\fP(3), and\fB elpa_setup\fP(3) must be called\fI BEFORE\fP\fB elpa_eigenvectors\fP can be called. In particular, the number of eigenvectors to be computed, "nev", must be set with\fB elpa_set\fP(3).

.SH SEE ALSO
\fBelpa2_print_kernels\fP(1)\fB elpa_init\fP(3)\fB elpa_allocate\fP(3)\fB elpa_set\fP(3)\fB elpa_setup\fP(3)\fB elpa_strerr\fP(3)\fB elpa_eigenvalues\fP(3)\fB elpa_skew_eigenvalues\fP(3)\fB elpa_skew_eigenvectors\fP(3)\fB elpa_cholesky\fP(3)\fB elpa_invert_triangular\fP(3)\fB elpa_solve_tridiagonal\fP(3)\fB elpa_hermitian_multiply\fP(3)\fB elpa_uninit\fP(3)\fB elpa_deallocate\fP(3)
