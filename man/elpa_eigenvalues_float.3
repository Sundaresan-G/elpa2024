.TH "elpa_eigenvalues_float" 3 "Wed Sep 1 2021" "ELPA" \" -*- nroff -*-
.ad l
.nh
.SH NAME
elpa_eigenvalues_float \- computes the eigenvalues of a real single-precision symmetric matrix
.br

.SH SYNOPSIS
.br
.SS FORTRAN INTERFACE
use elpa
.br
class(elpa_t), pointer :: elpa
.br

.RI  "call elpa%\fBeigenvalues_float\fP (a, ev, error)"
.br
.RI " "
.br
.RI "With the definitions of the input and output variables:"

.br
.RI "class(elpa_t) :: \fBelpa\fP  ! returns an instance of the ELPA object"
.br
.TP
.RI "datatype :: \fBa\fP"
The matrix a for which the eigenvalues should be computed. The dimensions of matrix a must be set \fIBEFORE\fP with the methods \fBelpa_set\fP(3) and \fBelpa_setup\fP(3). The datatype of the matrix must be real(kind=c_float). The matrix has to be symmetric this is not checked by the routine. In case of a GPU build \fBa\fP can be a device pointer of type "type(c_ptr) to a matrix a on the device memory.
.TP
.RI "datatype :: \fBev\fP"
The vector ev where the eigenvalues will be stored in \fIascending\fP order. The datatype of the vector ev must be "real(kind=c_float)". In case of a GPU build \fBev\fP can be a device pointer of type "type(c_ptr) to the vector of eigenvalues in the device memory
.
.TP
.RI "integer, optional :: \fBerror\fP"
The return error code of the function. Should be "ELPA_OK". The error code can be querried with the function \fBelpa_strerr\fP(3)

.br
.SS C INTERFACE
#include <elpa/elpa.h>
.br
elpa_t handle;

.br
.RI "void \fBelpa_eigenvalues_float\fP(\fBelpa_t\fP handle, \fBdatatype\fP *a, \fBdatatype\fP *ev, \fBint\fP *error);"
.br
.RI " "
.br
.RI "With the definitions of the input and output variables:"

.br
.TP
.RI "elpa_t \fBhandle\fP;"
The handle to the ELPA object
.TP
.RI "datatype *\fBa\fP;"
The matrix a for which the eigenvalues should be computed. The dimensions of the matrix must be set \fIBEFORE\fP with the methods \fBelpa_set\fP(3) and \fBelpa_setup\fP(3). The \fBdatatype\fP must be "float". The matrix has to be symmetric, this is not checked by the routine. In case of a GPU build \fBa\fP can be a device pointer to a matrix a on the device memory.
.TP
.RI "datatype *\fBev\fP;"
The storage for the computed eigenvalues. Eigenvalues will be stored in \fIascendig\fP order. The \fBdatatype\fP must be "float". In case of a GPU build \fBev\fP can be a device pointer to the vectors of eigenvalues in the device memory.

.TP
.RI "int *\fBerror\fP;"
The error code of the function. Should be "ELPA_OK". The error codes can be querried with \fBelpa_strerr\fP(3)

.SH DESCRIPTION
Compute the eigenvalues of a single precision real symmetric matrix. The functions \fBelpa_init\fP(3), \fBelpa_allocate\fP(3), \fBelpa_set\fP(3), and \fBelpa_setup\fP(3) must be called \fIBEFORE\fP \fBelpa_eigenvalues\fP can be called.
.br
.SH "SEE ALSO"
.br
\fBelpa2_print_kernels\fP(1) \fBelpa_init\fP(3) \fBelpa_allocate\fP(3) \fBelpa_set\fP(3) \fBelpa_setup\fP(3) \fBelpa_strerr\fP(3) \fBelpa_skew_eigenvalues\fP(3) \fBelpa_eigenvectors\fP(3) \fBelpa_skew_eigenvectors\fP(3) \fBelpa_cholesky\fP(3) \fBelpa_invert_triangular\fP(3) \fBelpa_solve_tridiagonal\fP(3) \fBelpa_eigenvalues\fP(3) \fBelpa_uninit\fP(3) \fBelpa_deallocate\fP(3)

